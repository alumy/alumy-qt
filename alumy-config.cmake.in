@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Set up paths
set_and_check(alumy_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set_and_check(alumy_LIB_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")

# Find required Qt components
find_dependency(QT NAMES Qt6 Qt5 COMPONENTS Widgets Network Core SerialPort Multimedia Concurrent REQUIRED)
find_dependency(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets Network Core SerialPort Multimedia Concurrent REQUIRED)

# Find system dependencies
if(${CMAKE_SYSTEM_NAME} STREQUAL Linux)
    find_library(RT_LIBRARY rt)
    if(RT_LIBRARY)
        list(APPEND alumy_LIBRARIES ${RT_LIBRARY})
    endif()
endif()

find_library(M_LIBRARY m)
if(M_LIBRARY)
    list(APPEND alumy_LIBRARIES ${M_LIBRARY})
endif()

# Find optional third-party dependencies that may have been bundled with alumy
set(alumy_LIB_DIR_PARENT "@PACKAGE_CMAKE_INSTALL_LIBDIR@")

# Save original CMAKE_PREFIX_PATH and add alumy cmake directory for finding bundled dependencies
set(_alumy_original_prefix_path ${CMAKE_PREFIX_PATH})
list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}")
list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/..")

# Try to find spdlog
if(NOT TARGET spdlog::spdlog)
    find_dependency(spdlog QUIET)
endif()

# Try to find log4qt  
if(NOT TARGET log4qt)
    find_library(log4qt_LIBRARY 
        NAMES log4qt
        PATHS ${alumy_LIB_DIR} 
        NO_DEFAULT_PATH)
    if(log4qt_LIBRARY)
        add_library(log4qt STATIC IMPORTED)
        set_target_properties(log4qt PROPERTIES
            IMPORTED_LOCATION ${log4qt_LIBRARY}
            INTERFACE_INCLUDE_DIRECTORIES "${alumy_INCLUDE_DIR}/log4qt"
        )
    endif()
endif()

# Try to find libsndfile
if(NOT TARGET SndFile::sndfile)
    find_dependency(SndFile QUIET)
endif()

# Try to find qpcpp
if(NOT TARGET qpcpp)
    find_library(qpcpp_LIBRARY 
        NAMES qpcpp libqpcpp
        PATHS ${alumy_LIB_DIR} 
        NO_DEFAULT_PATH)
    if(qpcpp_LIBRARY)
        add_library(qpcpp STATIC IMPORTED)
        set_target_properties(qpcpp PROPERTIES
            IMPORTED_LOCATION ${qpcpp_LIBRARY}
            INTERFACE_INCLUDE_DIRECTORIES "${alumy_INCLUDE_DIR}"
        )
    endif()
endif()

# Try to find gRPC libraries
if(NOT TARGET gRPC::grpc++)
    # Try to find system gRPC first
    find_dependency(gRPC QUIET)
    
    # If not found, try to find bundled gRPC libraries
    if(NOT TARGET gRPC::grpc++)
        find_library(grpcpp_LIBRARY 
            NAMES grpc++ libgrpc++
            PATHS ${alumy_LIB_DIR} 
            NO_DEFAULT_PATH)
        find_library(grpc_LIBRARY 
            NAMES grpc libgrpc
            PATHS ${alumy_LIB_DIR} 
            NO_DEFAULT_PATH)
        find_library(gpr_LIBRARY 
            NAMES gpr libgpr  
            PATHS ${alumy_LIB_DIR} 
            NO_DEFAULT_PATH)
        find_library(address_sorting_LIBRARY 
            NAMES address_sorting libaddress_sorting
            PATHS ${alumy_LIB_DIR} 
            NO_DEFAULT_PATH)
        find_library(upb_LIBRARY 
            NAMES upb libupb
            PATHS ${alumy_LIB_DIR} 
            NO_DEFAULT_PATH)
            
        if(grpcpp_LIBRARY AND grpc_LIBRARY AND gpr_LIBRARY AND address_sorting_LIBRARY AND upb_LIBRARY)
            # Create imported targets for gRPC
            add_library(gRPC::grpc++ STATIC IMPORTED)
            set_target_properties(gRPC::grpc++ PROPERTIES
                IMPORTED_LOCATION ${grpcpp_LIBRARY}
                INTERFACE_INCLUDE_DIRECTORIES "${alumy_INCLUDE_DIR}"
            )
            
            add_library(gRPC::grpc STATIC IMPORTED)
            set_target_properties(gRPC::grpc PROPERTIES
                IMPORTED_LOCATION ${grpc_LIBRARY}
                INTERFACE_INCLUDE_DIRECTORIES "${alumy_INCLUDE_DIR}"
            )
            
            add_library(gRPC::gpr STATIC IMPORTED)
            set_target_properties(gRPC::gpr PROPERTIES
                IMPORTED_LOCATION ${gpr_LIBRARY}
            )
            
            add_library(gRPC::address_sorting STATIC IMPORTED)
            set_target_properties(gRPC::address_sorting PROPERTIES
                IMPORTED_LOCATION ${address_sorting_LIBRARY}
            )
            
            add_library(gRPC::upb STATIC IMPORTED)
            set_target_properties(gRPC::upb PROPERTIES
                IMPORTED_LOCATION ${upb_LIBRARY}
            )
            
            # Set up dependencies between gRPC targets
            set_property(TARGET gRPC::grpc++ PROPERTY INTERFACE_LINK_LIBRARIES 
                gRPC::grpc gRPC::gpr gRPC::address_sorting gRPC::upb)
        endif()
    endif()
endif()

# Include the targets file  
include("${CMAKE_CURRENT_LIST_DIR}/alumy-targets.cmake")

# Ensure alumy target exists 
if(NOT TARGET alumy::alumy)
    message(FATAL_ERROR "alumy::alumy target was not found!")
endif()

# Provide legacy variables for compatibility  
set(alumy_LIBRARIES alumy::alumy)
set(alumy_INCLUDE_DIRS ${alumy_INCLUDE_DIR})
set(alumy_VERSION @PROJECT_VERSION@)

# Define a helper function to link all dependencies to a target
function(alumy_link_libraries target_name)
    # Check if the target is an INTERFACE library
    get_target_property(target_type ${target_name} TYPE)
    
    if(target_type STREQUAL "INTERFACE_LIBRARY")
        # For INTERFACE libraries, use INTERFACE keyword
        target_link_libraries(${target_name} INTERFACE alumy::alumy)
        
        # Link Qt libraries
        target_link_libraries(${target_name} INTERFACE
            Qt${QT_VERSION_MAJOR}::Core
            Qt${QT_VERSION_MAJOR}::Widgets
            Qt${QT_VERSION_MAJOR}::Network
            Qt${QT_VERSION_MAJOR}::SerialPort
            Qt${QT_VERSION_MAJOR}::Multimedia
            Qt${QT_VERSION_MAJOR}::Concurrent
        )
        
        # Set include directories
        target_include_directories(${target_name} INTERFACE ${alumy_INCLUDE_DIRS})
        
        # Set compile definitions
        target_compile_definitions(${target_name} INTERFACE AL_USE_DEFAULT_CONFIG)
    else()
        # For regular libraries, use PUBLIC keyword
        target_link_libraries(${target_name} PUBLIC alumy::alumy)
        
        # Link Qt libraries
        target_link_libraries(${target_name} PUBLIC
            Qt${QT_VERSION_MAJOR}::Core
            Qt${QT_VERSION_MAJOR}::Widgets
            Qt${QT_VERSION_MAJOR}::Network
            Qt${QT_VERSION_MAJOR}::SerialPort
            Qt${QT_VERSION_MAJOR}::Multimedia
            Qt${QT_VERSION_MAJOR}::Concurrent
        )
        
        # Set include directories
        target_include_directories(${target_name} PUBLIC ${alumy_INCLUDE_DIRS})
        
        # Set compile definitions
        target_compile_definitions(${target_name} PUBLIC AL_USE_DEFAULT_CONFIG)
    endif()
    
    # Link third-party dependencies if they were found and imported
    if(TARGET spdlog::spdlog)
        target_link_libraries(${target_name} INTERFACE spdlog::spdlog)
    endif()
    
    if(TARGET log4qt)
        target_link_libraries(${target_name} INTERFACE log4qt)
    endif()
    
    if(TARGET SndFile::sndfile)
        target_link_libraries(${target_name} INTERFACE SndFile::sndfile)
    endif()
    
    if(TARGET qpcpp)
        target_link_libraries(${target_name} INTERFACE qpcpp)
    endif()
    
    if(TARGET gRPC::grpc++)
        target_link_libraries(${target_name} INTERFACE gRPC::grpc++)
    endif()
endfunction()

# Restore original CMAKE_PREFIX_PATH
set(CMAKE_PREFIX_PATH ${_alumy_original_prefix_path})

check_required_components(alumy)
