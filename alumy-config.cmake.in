@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Set up paths
set_and_check(alumy_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set_and_check(alumy_LIB_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")

# Find required Qt components
find_dependency(QT NAMES Qt6 Qt5 COMPONENTS Widgets Network Core SerialPort Multimedia Concurrent REQUIRED)
find_dependency(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets Network Core SerialPort Multimedia Concurrent REQUIRED)

# Find system dependencies
if(${CMAKE_SYSTEM_NAME} STREQUAL Linux)
    find_library(RT_LIBRARY rt)
    if(RT_LIBRARY)
        list(APPEND alumy_LIBRARIES ${RT_LIBRARY})
    endif()
endif()

find_library(M_LIBRARY m)
if(M_LIBRARY)
    list(APPEND alumy_LIBRARIES ${M_LIBRARY})
endif()

# Include the targets file  
include("${CMAKE_CURRENT_LIST_DIR}/alumy-targets.cmake")

# Provide legacy variables for compatibility
set(alumy_LIBRARIES alumy::alumy)
set(alumy_INCLUDE_DIRS ${alumy_INCLUDE_DIR})
set(alumy_VERSION @PROJECT_VERSION@)

# Define a helper function to link all dependencies to a target
function(alumy_link_libraries target_name)
    # Check if the target is an INTERFACE library
    get_target_property(target_type ${target_name} TYPE)
    
    if(target_type STREQUAL "INTERFACE_LIBRARY")
        # For INTERFACE libraries, use INTERFACE keyword
        target_link_libraries(${target_name} INTERFACE alumy::alumy)
        
        # Link Qt libraries
        target_link_libraries(${target_name} INTERFACE
            Qt${QT_VERSION_MAJOR}::Core
            Qt${QT_VERSION_MAJOR}::Widgets
            Qt${QT_VERSION_MAJOR}::Network
            Qt${QT_VERSION_MAJOR}::SerialPort
            Qt${QT_VERSION_MAJOR}::Multimedia
            Qt${QT_VERSION_MAJOR}::Concurrent
        )
        
        # Set include directories
        target_include_directories(${target_name} INTERFACE ${alumy_INCLUDE_DIRS})
        
        # Set compile definitions
        target_compile_definitions(${target_name} INTERFACE AL_USE_DEFAULT_CONFIG)
    else()
        # For regular libraries, use PUBLIC keyword
        target_link_libraries(${target_name} PUBLIC alumy::alumy)
        
        # Link Qt libraries
        target_link_libraries(${target_name} PUBLIC
            Qt${QT_VERSION_MAJOR}::Core
            Qt${QT_VERSION_MAJOR}::Widgets
            Qt${QT_VERSION_MAJOR}::Network
            Qt${QT_VERSION_MAJOR}::SerialPort
            Qt${QT_VERSION_MAJOR}::Multimedia
            Qt${QT_VERSION_MAJOR}::Concurrent
        )
        
        # Set include directories
        target_include_directories(${target_name} PUBLIC ${alumy_INCLUDE_DIRS})
        
        # Set compile definitions
        target_compile_definitions(${target_name} PUBLIC AL_USE_DEFAULT_CONFIG)
    endif()
    
    # Link third-party dependencies if they exist as targets
    # These should always use INTERFACE regardless of target type since they're optional
    if(TARGET spdlog::spdlog)
        target_link_libraries(${target_name} INTERFACE spdlog::spdlog)
    endif()
    if(TARGET log4qt)
        target_link_libraries(${target_name} INTERFACE log4qt)
    endif()
    if(TARGET SndFile::sndfile)
        target_link_libraries(${target_name} INTERFACE SndFile::sndfile)
    endif()
    if(TARGET gRPC::grpc++)
        target_link_libraries(${target_name} INTERFACE gRPC::grpc++)
    endif()
endfunction()

check_required_components(alumy)
